[
    {
        "uri": "/posts/_draft---frontmatter",
        "content": "---\r\ntitle: \"\"\r\ndate: 2020-05-00 #YYYY-MM-DD(TT18:36:41+02:00)\r\ndraft: true #false\r\ncategories:\r\n  # - kursy\r\n  # - scripts\r\n  # - o stronie\r\n  # - Python\r\n  # - hugo\r\n  # - React\r\ndescription: \"\"\r\ntags:\r\n  # - bash\r\n  # - boilerplate\r\n  # - codecademy\r\n  # - course\r\n  # - coursera\r\n  # - git\r\n  # - hugo\r\n  # - marketing\r\n  # - organizacja\r\n  # - python\r\n  # - react\r\n  # - ruby\r\n  # - script\r\n  # - snippets\r\n  # - vcs\r\n  # - web-scraping\r\n---\r\n",
        "tags": []
    },
    {
        "uri": "/posts/js-shorthand",
        "content": "---\r\ntitle: \"JS - shorthand\"\r\ndate: 2020-05-20\r\ndraft: false\r\ncategories:\r\n  scripts\r\n  JavaScirpt\r\ndescription: Pierwszy raz z Ruby\r\ntags:\r\n  codecademy\r\n  course\r\n  snippets\r\n---\r\n\r\nTakie ćwiczenie na CodeCademy (część ścieżki więc konieczne do zaliczenia całości)\r\n\r\nutwórz funkcję, lifePhase(), która na podstawie liczby age, as zwróci opisowy wiek.\r\n\r\nSchemat:\r\n0-3 'baby'\r\n4-12 'child'\r\n13-19 'teen'\r\n20-64 'adult'\r\n65-140 'senior citizen'\r\njeśli liczba jest mniejsza od 0 lub większa od 140 - 'This is not a valid age'\r\n\r\nCzasami przy takich rzeczach korzystam z podpowiedzi i zamiast pisać coś prostego wolę to skopiować i wkleić\r\n\r\nTym razem hint to:\r\n\r\nMusisz wielokrotnie wykorzystać if statements.\r\n\r\nnie pamiętam czy na tym etapie kursu pojawiły się już shorthandy ale spróbuję sobie odświeżyć:\r\n\r\n`javascript\r\nfunction lifePhase(age) {\r\n  return 0  age || age  140\r\n    ? \"This is not a valid age\"\r\n    : age < 4\r\n    ? \"baby\"\r\n    : age < 13\r\n    ? \"child\"\r\n    : age < 20\r\n    ? \"teen\"\r\n    : age < 65\r\n    ? \"adult\"\r\n    : \"senior citizen\";\r\n}\r\n`\r\n\r\nhttps://www.sitepoint.com/shorthand-javascript-techniques/\r\n\r\nchyba jednak shorthandy musiały się pojawić bo gdzieś dalej jest;\r\n\r\n`javascript\r\nconst truthyOrFalsy = (value) = {\r\n  if (value) {\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\n\r\n// As a function declaration:\r\nfunction truthyOrFalsy(value) {\r\n  if (value) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n\r\n// Using a ternary:\r\nconst truthyOrFalsy = (value) = (value ? true : false);\r\n`\r\n\r\na nawet coś w rodzaju:\r\n\r\n`javascript\r\nconst motivateMe = (adjective, verb, noun) =\r\n  I am so ${adjective} because I ${verb} shorthands! Time to refactor some more long ${noun}!;\r\n`\r\n\r\na zaraz potem wyjaśnienie że deklaracja funkcji albo łączenie łańcuchów znaków (concatenation) też jest ok. (tylko że tak samo bolesne jak napisanie \"łączenie łańcuchów znaków\")\r\n\r\n`javascript\r\nconst howOld = (age, year) = {\r\n  // jaki mamy rok?\r\n  let dateToday = new Date();\r\n  let thisYear = dateToday.getFullYear();\r\n\r\n  const yeardiff = year - thisYear;\r\n  const newAge = age + yeardiff;\r\n  if (newAge < 0) {\r\n    return The year ${year} was ${-newAge} years before you were born;\r\n  } else if (newAge  age) {\r\n    return You will be ${newAge} in the year ${year};\r\n  } else {\r\n    return You were ${newAge} in the year ${year};\r\n  }\r\n};\r\n`\r\n",
        "tags": []
    },
    {
        "uri": "/posts/matlab-first-function",
        "content": "---\r\ntitle: \"Matlab - IDE vs notepad\"\r\ndate: 2020-05-22\r\ndraft: false\r\ncategories:\r\n  kursy\r\n  # - scripts\r\n  # - o stronie\r\n  # - Python\r\n  # - hugo\r\n  # - React\r\ndescription:\r\ntags:\r\n  # - bash\r\n  # - coursera\r\n  codecademy\r\n  course\r\n  # - python\r\n  # - script\r\n  snippets\r\n  boilerplate\r\n  # - git\r\n  # - hugo\r\n  # - marketing\r\n  # - organizacja\r\n  # - react\r\n  # - ruby\r\n  # - vcs\r\n  # - web-scraping\r\n---\r\n\r\nMatlab\r\n\r\nna forum Coursery w kursie mnóstwo ludzi ma problem z napisaniem pierwszej funkcji w testach - nie otwierają się w edytorze na https://matlab.mathworks.com/ tylko w zwykłym textboksie. Tymczasem...\r\n\r\n edytor funkcji\r\n\r\notwiera się z gotowym szablonem\r\n\r\n`matlab\r\nfunction [outputArg1,outputArg2] = untitled2(inputArg1,inputArg2)\r\n    %UNTITLED2 Summary of this function goes here\r\n    %   Detailed explanation goes here\r\n    outputArg1 = inputArg1;\r\n    outputArg2 = inputArg2;\r\nend\r\n`\r\n\r\nmin i max\r\n\r\nw ćwiczeniu w środku tygodnia\r\ngłówny cel to chyba zmuszenie ludzi do zajrzenia do dokumentacji, bo ma bardzo niewiele wspólnego z filmami z tego tygodnia\r\n\r\n`matlab\r\nfunction [mmr,mmm] = minimax(M)\r\n    %UNTITLED Summary of this function goes here\r\n    %   Detailed explanation goes here\r\n    mmr = transpose(abs(max(M,[],2)-min(M,[],2)));\r\n    mmm = abs(max(M,[],'all')-min(M,[],'all'));\r\nend\r\n`\r\n\r\n tworzenie matrycy\r\n\r\nćwiczenie na koniec tygodnia - dziwne bo wydaje się o wiele prostsze od poprzedniego. Tym razem bez dokumentacji, za to na podstawie filmów. Zadanie polega na stworzeniu matrycy o wysokości 3\\*n i szerokości m w której 1/3 wysokości będzie wypełniona jedynkami, potem dwójkami i na końcu trójkami.\r\nGłówny cel to chyba rozbicie na mniejsze problemy i powtórka z poprzedniego tygodnia (łączenie matryc)\r\n\r\n`matlab\r\nfunction [mat] = trio(n,m)\r\n    %UNTITLED2 Summary of this function goes here\r\n    %   Detailed explanation goes here\r\n    mat = [ones(n,m);2ones(n,m);3ones(n,m)];\r\nend\r\n`\r\n",
        "tags": []
    },
    {
        "uri": "/posts/notes-on-git",
        "content": "---\r\ntitle: \"notatki z git\"\r\ndate: 2020-03-03\r\ndraft: false\r\ncategories:\r\n  kursy\r\ndescription: notatki z kursu o git na Courserze\r\ntags:\r\n  git\r\n  vcs\r\n  coursera\r\n---\r\n\r\nnotatki z kursu o git na Courserze\r\n\r\nWiększość materiałów pochodzi z Coursery\r\n\r\n on setting new\r\n\r\nemail and privacy\r\n\r\ngit init\r\ngit clone URL\r\n\r\ngit init creates .git/ (git directory) in the current directory, the \"working tree\" is the current/parent directory that contains .git/\r\n\r\nThe git directory contains all the changes and their history and the working tree contains the current versions of the files.\r\n\r\nThe git directory acts as a database for all the changes tracked in Git and the working tree acts as a sandbox where we can edit the current versions of the files.\r\n\r\ngit add filename\r\nadds to the staging area (a file) - an index of what will go to the next commit\r\n\r\ngit status current info\r\ngit log histor of commits\r\n\r\ngit commit -m 'Commit message'\r\nmultiline are ususally ok -first as topic\r\n\r\ngit commit -a -m\r\ncommit previously added skipping staging\r\n\r\nand after a blank one more detailed description\r\ncould follow in up to 72 chars ususally\r\nbecause git log commend will not do any line wrapping.\r\n\r\ntracking lifecycle\r\nnew files start as untracked\r\n\r\ngit add new_file\r\nputs new_file in the staging area (skips modified for new files)\r\n\r\ntracked: modified  staged  committed\r\n\r\ngit diff filename for diff-like compare\r\n\r\nbez git\r\n\r\nwithout git there's still:\r\n\r\ncreate diff file\r\n\r\ndiff -u oldfile new file  change.diff\r\nand\r\npatch old_file < change.diff to merge diff with original file\r\n\r\n Command Explanation & Link\r\n\r\ngit commit -a Stages files automatically\r\ngit log -p Produces patch text\r\ngit show Shows various objects\r\ngit diff Is similar to the Linux diff command, and can show the differences in various commits\r\ngit diff --staged An alias to --cached, this will show all staged files compared to the named commit\r\ngit add -p Allows a user to interactively review patches to add to the current commit\r\ngit mv Similar to the Linux mv command, this moves a file\r\ngit rm Similar to the Linux rm command, this deletes, or removes a file\r\nThere are many useful git cheatsheets online as well. Please take some time to research and study a few, such as this one.\r\n\r\n.gitignore files\r\n\r\n.gitignore files are used to tell the git tool to intentionally ignore some files in a given Git repository. For example, this can be useful for configuration files or metadata files that a user may not want to check into the master branch. Check out more at: https://git-scm.com/docs/gitignore.\r\n\r\n A few common examples\r\n\r\nof file patterns to exclude can be found here.\r\n\r\nmore on git\r\n\r\ngit checkout is effectively used to switch branches.\r\n\r\ngit reset basically resets the repo, throwing away some changes.\r\n\r\nThere are some other useful articles online, which discuss more aggressive approaches to resetting the repo.\r\n\r\ngit commit --amend is used to make changes to commits after-the-fact, which can be useful for making notes about a given commit.\r\n\r\ngit revert makes a new commit which effectively rolls back a previous commit. Itâ€™s a bit like an undo command.\r\n\r\nThere are a few ways you can rollback commits in Git.\r\n\r\nThere are some interesting considerations about how git object data is stored, such as the usage of sha-1.\r\n\r\nFeel free to read more here:\r\n\r\nsha-1\r\nsha-1 collision detection on github.com\r\n\r\nCommand Explanation & Link\r\ngit branch Used to manage branches\r\ngit branch name Creates the branch\r\ngit branch -d name Deletes the branch\r\ngit branch -D name Forcibly deletes the branch\r\ngit checkout branch Switches to a branch.\r\ngit checkout -b branch Creates a new branch and switches to it.\r\ngit merge branch Merge joins branches together.\r\ngit merge --abort If there are merge conflicts (meaning files are incompatible), --abort can be used to abort the merge action.\r\ngit log --graph --oneline This shows a summarized view of the commit history for a repo.\r\n\r\n Git Best practices for Collaboration\r\n\r\nAlways sync branches before starting new work\r\n\r\nMake small commits for separate changes\r\n\r\nWork on big changes on a separate branch\r\n\r\nMerge master onto feature often to reduce conflicts\r\n\r\nWith two or more versions use master for latest and a separate branch for stable version\r\n\r\nDo not rebase changes that were pushed to remote repos\r\n\r\nWrite informative commit messages\r\n\r\non merge conflict: disable all added content, test that source works, then re-add step by step\r\n\r\nconflicts\r\n\r\nconflicts in cli\r\n\r\nrebase\r\n\r\nmore on rebase\r\n",
        "tags": []
    },
    {
        "uri": "/posts/poczatki-z-hugo",
        "content": "---\r\ntitle: \"Początki Z Hugo\"\r\ndate: 2020-05-18T17:37:02+02:00\r\ndraft: false\r\ncategories:\r\n  o stronie\r\n  hugo\r\ndescription: first post\r\nslug: hugo-start\r\ntags:\r\n  hugo\r\n  bash\r\n  organizacja\r\n---\r\n\r\nWreszcie skusiłem się na hugo zamiast jekylla. Całe to \"jest napisany w go\" powstrzymywało mnie już wystarczająco długo. Zresztą okazuje się że chocolatey instaluje hugo bez problemu, github pages hostuje zgodnie z (instrukcją)[https://gohugo.io/hosting-and-deployment/hosting-on-github/]\r\n\r\nszybkim skryptem z gałęzią gh-pages w katalogu /public\r\n\r\n`\r\n!/bin/sh\r\n\r\n sprawdzenie czy nie ma niezatwierdzonych zmian\r\nif [ \"git status -s\" ]\r\nthen\r\n    echo \"Katalog roboczy nie jest czysty. Zatwierdź zmiany (commit)\"\r\n    exit 1;\r\nfi\r\n\r\necho \"Usuwanie poprzedniej wersji\"\r\nrm -rf public\r\nmkdir public\r\ngit worktree prune\r\nrm -rf .git/worktrees/public/\r\n\r\necho \"Łączenie gałęzi gh-pages z katalogiem public\"\r\ngit worktree add -B gh-pages public origin/gh-pages\r\n\r\necho \"Usuwanie plików z katalogu public\"\r\nrm -rf public/*\r\n\r\necho \"Generowanie strony\"\r\nhugo\r\n\r\necho \"Aktualizacja gałęzi gh-pages\"\r\ncd public && git add --all && git commit -m \"Publishing to gh-pages (via publish-gh-pages.sh)\"\r\n\r\npush all\r\ngit push --all\r\n`\r\n",
        "tags": []
    },
    {
        "uri": "/posts/python-list-compregension",
        "content": "---\r\ntitle: \"Python: list comprehension\"\r\ndate: 2020-03-16\r\ndraft: false\r\ncategories:\r\n  kursy\r\n  Python\r\ntags:\r\n  python\r\n  coursera\r\n---\r\n\r\ncała lista\r\n\r\nnewlist = [element.method() for element in oldlist]\r\n\r\n wrunkowo z if\r\n\r\nnewlist = [element.method() for element in oldlist if element = \"chosen\"]\r\n\r\nwarunkowo z if/else\r\n\r\nnewlist = [element.method() if element != \"exception\" else element.exceptionmethod() for element in old_list]\r\n",
        "tags": []
    },
    {
        "uri": "/posts/python-scripts-marketing",
        "content": "---\r\ntitle: \"Quick and dirty Python scripts\"\r\ndate: 2020-04-10\r\ndraft: false\r\ncategories:\r\n  scripts\r\n  Python\r\ntags:\r\n  python\r\n  script\r\n  marketing\r\n  coursera\r\n---\r\n\r\nCouple small scripts for Marketing Analytics calculations\r\n\r\nCustomer Lifetime Value\r\nBreak Even Units\r\ntotal net profit\r\n\r\nin Marketing experiments\r\n",
        "tags": []
    },
    {
        "uri": "/posts/react-boilerplates",
        "content": "---\r\ntitle: \"React boilerplates\"\r\ndate: 2019-10-10\r\ndraft: false\r\ncategories:\r\n  React\r\n\r\ndescription: quick boilerplates and templates\r\ntags:\r\n  react\r\n  boilerplate\r\n---\r\n\r\nKomponenty State i Stateless\r\n\r\nParent przekazuje stan do Child i renderuje Child.\r\nChild renderuje stan otrzymany z Parent\r\n\r\n Parent\r\n\r\n`\r\nreact component\r\nimport React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport {Child} from './Child'\r\n\r\n\r\nclass Parent extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { name: 'Value' };\r\n  }\r\n\r\n  render() {\r\n    return Child name={this.state.name} /;\r\n  }\r\n}\r\n\r\nReactDOM.render(\r\n  Parent /,\r\n  document.getElementById('app')\r\n)\r\n`\r\n\r\n Child\r\n\r\n`\r\nimport React from 'react';\r\n\r\nexport class Child extends React.Component {\r\n  render() {\r\n    return h1Hey, my name is {this.props.name}!/h1;\r\n  }\r\n};\r\n`\r\n",
        "tags": []
    },
    {
        "uri": "/posts/ruby-web-scrape",
        "content": "---\r\ntitle: \"Ruby - hello world plus\"\r\ndate: 2020-04-10\r\ndraft: false\r\ncategories:\r\n  scripts\r\n  Ruby\r\ndescription: Pierwszy raz z Ruby\r\ntags:\r\n  ruby\r\n  script\r\n  web-scraping\r\n---\r\n\r\nRuby chciałem wypróbować od kiedy zrobiło się o nim głośno na podcastach TWiT, a potem jeszcze bardziej kiedy przeczytałem Codex. Ale nie było okazji i dopiero dzisiaj wróciłem do tematu. Jak na początek i pierwszy raz - baprawdę szybko poszło. Mój pierwszy w życiu skrypt w Ruby (oparty na dwóch tutorialach) napisałem zanim na dobre zdecydowałem czy lepiej będzie zainstalować Ruby z rbenv czy rvm.\r\n",
        "tags": []
    }
]